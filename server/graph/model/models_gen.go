// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Game struct {
	ID         string    `json:"id"`
	Scoreboard []*Player `json:"Scoreboard"`
	Comments   []string  `json:"Comments"`
}

type Player struct {
	Username  string `json:"username"`
	Role      Role   `json:"role"`
	IsAlive   bool   `json:"isAlive"`
	DaysAlive int    `json:"daysAlive"`
}

type Role string

const (
	RoleCivilian Role = "Civilian"
	RoleMafia    Role = "Mafia"
)

var AllRole = []Role{
	RoleCivilian,
	RoleMafia,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleCivilian, RoleMafia:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
